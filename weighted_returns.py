# -*- coding: utf-8 -*-
"""Weighted returns.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xOfhbV4cWtUBXUPEYdBAMhOAB7clr3d5
"""

import pandas as pd
import numpy as np
import math

def n_minus_one_digits(value):
    return value // 10 ** (int(math.log(value, 10)) - int(math.log10(value)) + 1)

df = pd.read_excel('hamzadata.xlsx')

df = df[94:]

Row_list =[] 

for index, rows in df.iterrows(): 
	my_list =[rows.Funds, rows.Date, rows.Assets, rows.Return] 
	 
	Row_list.append(my_list)

dict = {'fund_10': [Row_list[0]]}               

for j in range(len(Row_list)-1):
  j += 1
  signal = False
  for key in dict:
    if (n_minus_one_digits(int(Row_list[j][0])) == n_minus_one_digits(dict[key][0][0])):
      dict[key].append(Row_list[j])
      signal = True
  if (signal == False):
    dict['fund_%s' % n_minus_one_digits(int(Row_list[j][0]))] = []
    dict['fund_%s' % n_minus_one_digits(int(Row_list[j][0]))].append(Row_list[j])

weighted_returns = {}                       

for key in dict:
  weighted_returns[key] = []

for key in dict:

  for i in range(len(dict[key])):
    signal = 0  

    for r in range(len(weighted_returns[key])):
      for h in weighted_returns[key][r]:
        if (int(h) == int(dict[key][i][1])):
          signal = signal + 1       
    if (signal == 0):
      weighted_sum = 0
      date_return = []
      total_assets = dict[key][i][2]
      ind_assets = [dict[key][i][2]]
      ind_returns = [dict[key][i][3]]

      for j in range(len(dict[key])-(i+1)):
        j = j + i + 1

        if (int(dict[key][i][1]) == int(dict[key][j][1])):
          ind_assets.append(dict[key][j][2])
          ind_returns.append(dict[key][j][3])
          total_assets = total_assets + dict[key][j][2]

      for k in range(len(ind_assets)):
        weighted_sum += ind_assets[k]/total_assets*ind_returns[k]
      date_return.append(int(dict[key][i][1]))
      date_return.append(weighted_sum)
      weighted_returns[key].append(date_return)

df = pd.DataFrame.from_dict(weighted_returns, orient='index')

df = (df.T)

print (df)

df.to_excel('results.xlsx')               # this line produces the excel file with all outputs, wait until it appears in your left bar 
                                          # on the very left side click on "Table of Contents" -> "Files", it will appear here